From: Simon McVittie <smcv@debian.org>
Date: Sat, 7 Sep 2024 17:15:03 +0100
Subject: MetaContextTest: Optionally create and destroy a temporary
 XDG_DATA_HOME

This is similar to G_TEST_OPTION_ISOLATE_DIRS, but it guarantees to set
the XDG_DATA_HOME environment variable, which I think
G_TEST_OPTION_ISOLATE_DIRS does not.

Signed-off-by: Simon McVittie <smcv@debian.org>
---
 src/tests/meta-context-test.c           | 29 +++++++++++++++++++++++++++++
 src/tests/meta-test/meta-context-test.h |  1 +
 2 files changed, 30 insertions(+)

diff --git a/src/tests/meta-context-test.c b/src/tests/meta-context-test.c
index 54459f6..2456433 100644
--- a/src/tests/meta-context-test.c
+++ b/src/tests/meta-context-test.c
@@ -49,6 +49,7 @@ static guint signals[N_SIGNALS];
 
 typedef struct _MetaContextTestPrivate
 {
+  char *xdg_data_home;
   MetaContextTestType type;
   MetaContextTestFlag flags;
 } MetaContextTestPrivate;
@@ -98,6 +99,16 @@ meta_context_test_configure (MetaContext   *context,
   if (priv->flags & META_CONTEXT_TEST_FLAG_TEST_CLIENT)
     meta_ensure_test_client_path (*argc, *argv);
 
+  if (priv->flags & META_CONTEXT_TEST_FLAG_TEMP_XDG_DATA_HOME)
+    {
+      priv->xdg_data_home = g_dir_make_tmp ("mutter-test-xdh.XXXXXX", error);
+
+      if (priv->xdg_data_home == NULL)
+        return FALSE;
+
+      g_setenv ("XDG_DATA_HOME", priv->xdg_data_home, TRUE);
+    }
+
   meta_wayland_override_display_name ("mutter-test-display");
 #ifdef HAVE_XWAYLAND
   meta_xwayland_override_display_number (512);
@@ -340,9 +351,25 @@ meta_create_test_context (MetaContextTestType type,
   return META_CONTEXT (context_test);
 }
 
+static void
+meta_context_test_finalize (GObject *object)
+{
+  MetaContextTest *context_test = META_CONTEXT_TEST (object);
+  MetaContextTestPrivate *priv =
+    meta_context_test_get_instance_private (context_test);
+
+  if (priv->xdg_data_home != NULL)
+    meta_rm_rf (priv->xdg_data_home);
+
+  g_clear_pointer (&priv->xdg_data_home, g_free);
+
+  G_OBJECT_CLASS (meta_context_test_parent_class)->finalize (object);
+}
+
 static void
 meta_context_test_class_init (MetaContextTestClass *klass)
 {
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
   MetaContextClass *context_class = META_CONTEXT_CLASS (klass);
 
   context_class->configure = meta_context_test_configure;
@@ -357,6 +384,8 @@ meta_context_test_class_init (MetaContextTestClass *klass)
   context_class->is_x11_sync = meta_context_test_is_x11_sync;
 #endif
 
+  object_class->finalize = meta_context_test_finalize;
+
   signals[BEFORE_TESTS] =
     g_signal_new ("before-tests",
                   G_TYPE_FROM_CLASS (klass),
diff --git a/src/tests/meta-test/meta-context-test.h b/src/tests/meta-test/meta-context-test.h
index e3ef6fb..381578c 100644
--- a/src/tests/meta-test/meta-context-test.h
+++ b/src/tests/meta-test/meta-context-test.h
@@ -33,6 +33,7 @@ typedef enum _MetaContextTestFlag
   META_CONTEXT_TEST_FLAG_NONE = 0,
   META_CONTEXT_TEST_FLAG_TEST_CLIENT = 1 << 0,
   META_CONTEXT_TEST_FLAG_NO_X11 = 1 << 1,
+  META_CONTEXT_TEST_FLAG_TEMP_XDG_DATA_HOME = 1 << 2,
 } MetaContextTestFlag;
 
 typedef enum _MetaTestRunFlags
