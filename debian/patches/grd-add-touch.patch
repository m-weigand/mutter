diff --git a/src/backends/meta-eis-client.c b/src/backends/meta-eis-client.c
index 8012c9739..380d0a4b1 100644
--- a/src/backends/meta-eis-client.c
+++ b/src/backends/meta-eis-client.c
@@ -54,8 +54,12 @@ struct _MetaEisClient
   GHashTable *eis_devices; /* eis_device => MetaEisDevice*/
   MetaEisDevice *pointer_device;
   MetaEisDevice *keyboard_device;
+  MetaEisDevice *touch_device;
   gulong keymap_changed_handler_id;
   gboolean have_abs_pointer_devices;
+  gboolean have_touch_devices;
+  GHashTable *eis_touch_id_to_slot; /* clutter touch slot => eis contact id*/
+  GHashTable *eis_touch_slot_to_id; /* clutter eis contact id=> touch slot*/
 
   gulong viewports_changed_handler_id;
 };
@@ -165,6 +169,19 @@ drop_device (gpointer htkey,
   return TRUE;
 }
 
+static gboolean
+drop_touch_devices (gpointer key,
+                  gpointer value,
+                  gpointer data)
+{
+  struct eis_device *eis_device = key;
+
+  if (!eis_device_has_capability (eis_device, EIS_DEVICE_CAP_TOUCH))
+    return FALSE;
+
+  return drop_device (key, value, data);
+}
+
 static gboolean
 drop_abs_devices (gpointer key,
                   gpointer value,
@@ -195,6 +212,7 @@ configure_rel (MetaEisClient     *client,
   eis_device_configure_capability (eis_device, EIS_DEVICE_CAP_SCROLL);
 }
 
+
 static void
 configure_keyboard (MetaEisClient     *client,
                     struct eis_device *eis_device,
@@ -296,6 +314,17 @@ add_viewport_region (struct eis_device *eis_device,
   eis_region_unref (eis_region);
 }
 
+static void
+configure_touch (MetaEisClient     *client,
+               struct eis_device *eis_device,
+               gpointer           user_data)
+{
+	g_message("[GNOME.RDP.EIS: configure_touch");
+  MetaEisViewport *viewport = META_EIS_VIEWPORT (user_data);
+  eis_device_configure_capability (eis_device, EIS_DEVICE_CAP_TOUCH);
+  add_viewport_region (eis_device, viewport);
+}
+
 static void
 configure_abs (MetaEisClient     *client,
                struct eis_device *eis_device,
@@ -552,6 +581,186 @@ handle_scroll_discrete (MetaEisClient    *client,
     }
 }
 
+static void
+handle_touch_down (MetaEisClient *client, struct eis_event *event)
+{
+  struct eis_device *eis_device = eis_event_get_device (event);
+  MetaEisDevice *device = eis_device_get_user_data (eis_device);
+  double x, y;
+  int slot;
+  int * touch_id = g_new(int, 1);
+  void * res_ptr;
+  int result;
+
+  x = eis_event_touch_get_x (event);
+  y = eis_event_touch_get_y (event);
+  slot = eis_event_touch_get_id(event);
+  *touch_id = eis_event_touch_get_id(event);
+
+  res_ptr = g_hash_table_lookup(
+	client->eis_touch_id_to_slot,
+	touch_id
+  );
+  // TODO: I am not sure if I can use only one set of slow-id variables
+  // for the two hash-maps, given that the pointers will be deleted upon
+  // removal
+  // therefore, we use two sets
+  int * slot_v1 = g_new(int, 1);
+  int * id_v1 = g_new(int, 1);
+  int * slot_v2 = g_new(int, 1);
+  int * id_v2 = g_new(int, 1);
+  *slot_v1 = -1;
+  *id_v1 = -1;
+  g_message("handle_touch_down: touch_id: %i", *touch_id);
+  if (res_ptr == NULL){
+	  // we do not have a slot associated with this key, yet
+	  g_message("touch id was not yet assigned a slot");
+	  // find the next free slot
+	  for (int i=3; i<=64; i++){
+		  g_message("checking slot %i", i);
+		  res_ptr = g_hash_table_lookup(
+		  	client->eis_touch_slot_to_id,
+			&i
+		  );
+		  if (res_ptr == NULL){
+			  // this is our new slot
+			  g_message("slot not taken, yet. Taking it");
+			  *slot_v1 = i;
+			  *id_v1 = *touch_id;
+			  *slot_v2 = i;
+			  *id_v2 = *touch_id;
+
+			  g_message("inserting id/slot v1: %i/%i", *id_v1, *slot_v1);
+			  g_hash_table_insert(
+				client->eis_touch_slot_to_id,
+				slot_v1,
+				id_v1
+			  );
+			  g_hash_table_insert(
+				client->eis_touch_id_to_slot,
+				id_v2,
+				slot_v2
+			  );
+			  // test
+			  g_message("Nr of items: %i\n", g_hash_table_size(client->eis_touch_id_to_slot));
+			  g_message("Nr of items: %i\n", g_hash_table_size(client->eis_touch_slot_to_id));
+			  GList * keys = g_hash_table_get_keys(client->eis_touch_id_to_slot);
+			  g_message("First key: %i\n", *(int *)keys->data);
+			  g_list_free(keys);
+
+			  GList * values = g_hash_table_get_values(client->eis_touch_id_to_slot);
+			  g_message("First value: %i\n", *(int *)values->data);
+			  g_list_free(values);
+
+			  //
+			  void * res2 = NULL;
+			  int test;
+			  res2 = g_hash_table_lookup (client->eis_touch_id_to_slot, GINT_TO_POINTER(touch_id));
+			  if (res2 == NULL){
+				  g_message("CHECK: touch_id not found! %i....", *touch_id);
+			  }
+			  else{
+				  g_message("CHECK: touch_id was found!....");
+			  	  test = *(int *)res2;
+				  g_message("CHECK: touch_id: %i", test);
+			  }
+
+			  break;
+		  }
+	  }
+  } else {
+	g_message("WARNING: this touch id should NOT have a slot assigned!");
+  }
+  g_free(touch_id);
+  g_message("Chosen slot: %i", *slot_v1);
+
+  clutter_virtual_input_device_notify_touch_down(
+		device->device,
+		g_get_monotonic_time (),
+		*slot_v1,
+		x, y
+	);
+}
+
+static void
+handle_touch_motion (MetaEisClient *client, struct eis_event *event)
+{
+  struct eis_device *eis_device = eis_event_get_device (event);
+  MetaEisDevice *device = eis_device_get_user_data (eis_device);
+  double x, y;
+  void * res_ptr;
+  int * touch_id = g_new(int, 1);
+  int slot;
+
+  *touch_id = eis_event_touch_get_id(event);
+  g_message("handle_touch_motion: checking for touch id: %i", *touch_id);
+  // retrieve the slot for this id - we are moving, so we expect to already
+  // have a slot
+  res_ptr = g_hash_table_lookup(
+    client->eis_touch_id_to_slot,
+	touch_id
+  );
+  if (res_ptr == NULL){
+	  // this should not happened
+	  g_message("WARNING: Touch id %i did not have a slot assigned. This should not happen. Ignoring touch", *touch_id);
+	  return;
+  }
+  slot = * (int *) res_ptr;
+  g_message("handle_touch_motion: using slot %i for id %i", slot, *touch_id);
+  g_free(touch_id);
+
+  x = eis_event_touch_get_x (event);
+  y = eis_event_touch_get_y (event);
+
+  clutter_virtual_input_device_notify_touch_motion(
+		device->device,
+		g_get_monotonic_time (),
+		slot,
+		x, y
+	);
+}
+
+
+static void
+handle_touch_up (MetaEisClient *client, struct eis_event *event)
+{
+  struct eis_device *eis_device = eis_event_get_device (event);
+  MetaEisDevice *device = eis_device_get_user_data (eis_device);
+  void * res_ptr;
+  int * touch_id = g_new(int, 1);
+  int slot;
+
+  *touch_id = eis_event_touch_get_id(event);
+  g_message("handle_touch_up for touch id: %i", *touch_id);
+  // retrieve the slot for this id - we are moving, so we expect to already
+  // have a slot
+  res_ptr = g_hash_table_lookup(
+    client->eis_touch_id_to_slot,
+	touch_id
+  );
+  if (res_ptr == NULL){
+	  // this should not happend
+	  g_message("WARNING: Touch id %i did not have a slot assigned. This should not happen. Ignoring touch", *touch_id);
+	  return;
+  }
+  slot = * (int *) res_ptr;
+  g_message("handle_touch_motion: using slot %i for id %i", slot, *touch_id);
+
+  clutter_virtual_input_device_notify_touch_up(
+		 device->device,
+		g_get_monotonic_time (),
+		slot
+	);
+  // now we need to delete the slot/id combo
+  g_message("removing id/slot from hash tables: %i/%i", *touch_id, slot);
+  int ret;
+  ret = g_hash_table_remove(client->eis_touch_id_to_slot, touch_id);
+  g_message("g_hash_table_remove(client->eis_touch_id_to_slot: %i", ret);
+  g_hash_table_remove(client->eis_touch_slot_to_id, &slot);
+  g_message("g_hash_table_remove(client->eis_touch_slot_to_id: %i", ret);
+  g_free(touch_id);
+}
+
 static void
 handle_button (MetaEisClient    *client,
                struct eis_event *event)
@@ -628,6 +837,82 @@ on_keymap_changed (MetaBackend *backend,
                                         configure_keyboard, NULL);
 }
 
+static void
+add_viewport_devices_touch (MetaEisClient           *client,
+                      ClutterInputDeviceType   type,
+                      const char              *name_suffix,
+                      MetaEisDeviceConfigFunc  extra_config_func)
+{
+  MetaEisDevice *shared_device = NULL;
+  GList *viewports;
+  GList *l;
+  g_message("[RDP.GNOME] add_viewport_devices_touch");
+
+  g_return_if_fail (eis_seat_has_capability (client->eis_seat,
+			  										EIS_DEVICE_CAP_TOUCH));
+  g_message("[RDP.GNOME] we have touch capability");
+
+  viewports = meta_eis_peek_viewports (client->eis);
+  if (!viewports){
+	  g_message("add_viewport_devices_touch: no viewports!");
+    return; /* FIXME: should be an error */
+  }
+
+  /* WARNING: I basically copied this from the absolute pointer case. I am not
+   * sure if
+   * a) we can actually have multiple viewports
+   * b) how would we map a touchscreen to multiple viewports?
+   * */
+  for (l = viewports; l; l = l->next)
+    {
+      MetaEisViewport *viewport = l->data;
+  	  g_message("[RDP.GNOME] touch viewport loop");
+
+      if (meta_eis_viewport_is_standalone (viewport))
+        {
+          MetaEisDevice *device;
+          g_autofree char *name = NULL;
+  	  	  g_message("[RDP.GNOME] touch viewport is standalone");
+
+          name = g_strdup_printf ("standalone %s", name_suffix);
+          device = add_device (client,
+                               client->eis_seat,
+                               type,
+                               name,
+                               extra_config_func,
+                               viewport);
+          device->viewport = viewport;
+        }
+      else
+        {
+  	  	  g_message("[RDP.GNOME] touch viewport is NOT standalone");
+          if (!shared_device)
+            {
+              g_autofree char *name = NULL;
+  	  	  	  g_message("[RDP.GNOME] touch viewport is not a shared device");
+
+              name = g_strdup_printf ("shared %s", name_suffix);
+              shared_device = create_device (client,
+                                             client->eis_seat,
+                                             type,
+                                             name,
+                                             extra_config_func,
+                                             viewport);
+            }
+          else
+            {
+  	  	  	  g_message("[RDP.GNOME] touch viewport is shared device");
+			  // disabled for touch... we only use the first viewport
+			  // TODO: this does not feel right...
+              /* add_viewport_region (shared_device->eis_device, viewport); */
+            }
+        }
+    }
+
+  if (shared_device)
+    propagate_device (shared_device);
+}
+
 static void
 add_viewport_devices (MetaEisClient           *client,
                       ClutterInputDeviceType   type,
@@ -637,6 +922,7 @@ add_viewport_devices (MetaEisClient           *client,
   MetaEisDevice *shared_device = NULL;
   GList *viewports;
   GList *l;
+  g_message("[RDP.GNOME] add_viewport_devices");
 
   g_return_if_fail (eis_seat_has_capability (client->eis_seat,
                                              EIS_DEVICE_CAP_POINTER_ABSOLUTE));
@@ -648,11 +934,13 @@ add_viewport_devices (MetaEisClient           *client,
   for (l = viewports; l; l = l->next)
     {
       MetaEisViewport *viewport = l->data;
+  	  g_message("[RDP.GNOME] viewport loop");
 
       if (meta_eis_viewport_is_standalone (viewport))
         {
           MetaEisDevice *device;
           g_autofree char *name = NULL;
+  	  	  g_message("[RDP.GNOME] viewport is standalone");
 
           name = g_strdup_printf ("standalone %s", name_suffix);
           device = add_device (client,
@@ -665,9 +953,11 @@ add_viewport_devices (MetaEisClient           *client,
         }
       else
         {
+  	  	  g_message("[RDP.GNOME] viewport is NOT standalone");
           if (!shared_device)
             {
               g_autofree char *name = NULL;
+  	  	  	  g_message("[RDP.GNOME] viewport is not a shared device");
 
               name = g_strdup_printf ("shared %s", name_suffix);
               shared_device = create_device (client,
@@ -679,6 +969,7 @@ add_viewport_devices (MetaEisClient           *client,
             }
           else
             {
+  	  	  	  g_message("[RDP.GNOME] viewport is shared device");
               add_viewport_region (shared_device->eis_device, viewport);
             }
         }
@@ -688,6 +979,15 @@ add_viewport_devices (MetaEisClient           *client,
     propagate_device (shared_device);
 }
 
+static void
+add_touch_devices (MetaEisClient *client)
+{
+  add_viewport_devices_touch (client,
+                        CLUTTER_TOUCHSCREEN_DEVICE,
+                        "virtual touchscreen",
+                        configure_touch);
+}
+
 static void
 add_abs_pointer_devices (MetaEisClient *client)
 {
@@ -711,6 +1011,7 @@ meta_eis_client_process_event (MetaEisClient    *client,
         gboolean wants_pointer_device;
         gboolean wants_keyboard_device;
         gboolean wants_abs_pointer_devices;
+        gboolean wants_touch_devices;
 
         eis_seat = eis_event_get_seat (event);
 
@@ -720,6 +1021,8 @@ meta_eis_client_process_event (MetaEisClient    *client,
           eis_event_seat_has_capability (event, EIS_DEVICE_CAP_KEYBOARD);
         wants_abs_pointer_devices =
           eis_event_seat_has_capability (event, EIS_DEVICE_CAP_POINTER_ABSOLUTE);
+        wants_touch_devices =
+          eis_event_seat_has_capability (event, EIS_DEVICE_CAP_TOUCH);
 
         if (wants_pointer_device && !client->pointer_device)
           {
@@ -743,6 +1046,34 @@ meta_eis_client_process_event (MetaEisClient    *client,
             remove_device (client, pointer->eis_device, TRUE);
           }
 
+        if (wants_touch_devices && !client->have_touch_devices)
+          {
+            meta_topic (META_DEBUG_EIS,
+                        "Seat %s bindings updated, creating touch device",
+                        eis_seat_get_name (eis_seat));
+            /* client->touch_device = add_device (client, */
+            /*                                      eis_seat, */
+            /*                                      CLUTTER_TOUCHSCREEN_DEVICE, */
+            /*                                      "virtual touchscreen", */
+            /*                                      configure_touch, NULL); */
+			add_touch_devices(client);
+			client->have_touch_devices = TRUE;
+          }
+        else if (!wants_touch_devices && client->have_touch_devices)
+          {
+            MetaEisDevice *pointer;
+
+            meta_topic (META_DEBUG_EIS,
+                        "Seat %s bindings updated, destroying touchscreen device",
+                        eis_seat_get_name (eis_seat));
+            /* pointer = g_steal_pointer (&client->touch_device); */
+            /* remove_device (client, pointer->eis_device, TRUE); */
+            g_hash_table_foreach_remove (client->eis_devices,
+                                         drop_touch_devices,
+                                         client);
+			client->have_touch_devices = FALSE;
+          }
+
         if (wants_keyboard_device && !client->keyboard_device)
           {
             meta_topic (META_DEBUG_EIS,
@@ -814,7 +1145,8 @@ meta_eis_client_process_event (MetaEisClient    *client,
       handle_motion_relative (client, event);
       break;
     case EIS_EVENT_POINTER_MOTION_ABSOLUTE:
-      handle_motion_absolute (client, event);
+		g_message("[RDP] EIS_EVENT_POINTER_MOTION_ABSOLUTE");
+      // handle_motion_absolute (client, event);
       break;
     case EIS_EVENT_BUTTON_BUTTON:
       handle_button (client, event);
@@ -841,6 +1173,15 @@ meta_eis_client_process_event (MetaEisClient    *client,
       break;
     case EIS_EVENT_DEVICE_STOP_EMULATING:
       break;
+	case EIS_EVENT_TOUCH_DOWN:
+	  handle_touch_down(client, event);
+	  break;
+	case EIS_EVENT_TOUCH_UP:
+	  handle_touch_up(client, event);
+	  break;
+	case EIS_EVENT_TOUCH_MOTION:
+	  handle_touch_motion(client, event);
+	  break;
     default:
       g_warning ("Unhandled EIS event type %d", type);
       return FALSE;
@@ -858,8 +1199,17 @@ update_viewports (MetaEisClient *client)
                                drop_abs_devices,
                                client);
 
+  g_hash_table_foreach_remove (client->eis_devices,
+                               drop_touch_devices,
+                               client);
+
   if (client->have_abs_pointer_devices)
     add_abs_pointer_devices (client);
+
+  if (client->have_touch_devices){
+	  g_message("calling add_touch_devices again");
+    add_touch_devices (client);
+  }
 }
 
 static void
@@ -915,6 +1265,10 @@ meta_eis_client_new (MetaEis           *eis,
       eis_seat_configure_capability (eis_seat, EIS_DEVICE_CAP_BUTTON);
       eis_seat_configure_capability (eis_seat, EIS_DEVICE_CAP_SCROLL);
     }
+  if (meta_eis_get_device_types (eis) & META_EIS_DEVICE_TYPE_TOUCHSCREEN)
+    {
+      eis_seat_configure_capability (eis_seat, EIS_DEVICE_CAP_TOUCH);
+	}
 
   eis_seat_add (eis_seat);
   eis_seat_unref (eis_seat);
@@ -923,6 +1277,16 @@ meta_eis_client_new (MetaEis           *eis,
   client->eis_devices = g_hash_table_new_full (g_direct_hash, g_direct_equal,
                                                (GDestroyNotify) eis_device_unref,
                                                (GDestroyNotify) meta_eis_device_free);
+  client->eis_touch_id_to_slot = g_hash_table_new_full(
+		 g_int_hash,
+		 g_int_equal,
+		 (GDestroyNotify) g_free,
+		 (GDestroyNotify) g_free);
+  client->eis_touch_slot_to_id = g_hash_table_new_full(
+		 g_int_hash,
+		 g_int_equal,
+		 (GDestroyNotify) g_free,
+		 (GDestroyNotify) g_free);
 
   client->viewports_changed_handler_id =
     g_signal_connect (eis, "viewports-changed",
